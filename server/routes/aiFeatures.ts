import { RequestHandler } from "express";
import multer from "multer";
import fetch from 'node-fetch';
import FormData from 'form-data';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { db } from "../services/dbService";
import { differenceInDays, parseISO } from "date-fns";

const upload = multer({ storage: multer.memoryStorage() });
export const aiScanUpload = upload.single("document");

export const handleAiScan: RequestHandler = async (req, res) => {
  if (!req.file) return res.status(400).json({ error: "No file uploaded." });
  const buildshipApiUrl = process.env.BUILTSHIP_AI_SCAN_URL;
  if (!buildshipApiUrl) return res.status(500).json({ error: "AI Scan service is not configured." });

  try {
    const formData = new FormData();
    formData.append("uploadImages", req.file.buffer, { filename: req.file.originalname, contentType: req.file.mimetype });
    formData.append("databaseTableName", "insurancePolicies");
    const response = await fetch(buildshipApiUrl, { method: "POST", body: formData });
    if (!response.ok) throw new Error(`Buildship API failed: ${await response.text()}`);
    const data = await response.json();
    res.status(200).json(data.output);
  } catch (error) {
    res.status(500).json({ error: (error as Error).message });
  }
};

export const handleGenerateDocument: RequestHandler = async (req, res) => {
    const { name, dob, address, idNumber } = req.body;
    try {
        const pdfDoc = await PDFDocument.create();
        const page = pdfDoc.addPage();
        const { height } = page.getSize();
        const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
        const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
        
        page.drawText('Customer Onboarding Form (Generated by PolicyPal AI)', { x: 50, y: height - 50, font: boldFont, size: 18, color: rgb(0.02, 0.37, 0.27) });
        page.drawText(`Full Name: ${name}`, { x: 50, y: height - 100, font, size: 12 });
        page.drawText(`Date of Birth: ${dob}`, { x: 50, y: height - 120, font, size: 12 });
        page.drawText(`Address: ${address}`, { x: 50, y: height - 140, font, size: 12 });
        page.drawText(`ID Number: ${idNumber}`, { x: 50, y: height - 160, font, size: 12 });
        
        const pdfBytes = await pdfDoc.save();
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename=Onboarding-${name}.pdf`);
        res.send(Buffer.from(pdfBytes));
    } catch (error) {
        res.status(500).json({ error: "Failed to generate PDF document." });
    }
};

export const handleNextBestAction: RequestHandler = async (req, res) => {
    const policies = await db.getAllPolicies();
    const now = new Date();
    
    const urgentRenewals = policies
        .filter(p => p.status === 'Renewal Due' && differenceInDays(parseISO(p.dueDate), now) >= 0)
        .sort((a,b) => differenceInDays(parseISO(a.dueDate), now) - differenceInDays(parseISO(b.dueDate), now));
    if (urgentRenewals.length > 0) {
        const p = urgentRenewals[0];
        const days = differenceInDays(parseISO(p.dueDate), now);
        return res.json({ action: 'URGENT_RENEWAL', title: `Renew Policy for ${p.customer}`, description: `Policy #${p.id} is due in ${days} days!`, policyId: p.id, customer: p });
    }
    const lapsedPolicies = policies.filter(p => p.status === 'Lapsed' && differenceInDays(now, parseISO(p.lastContacted)) > 30);
    if (lapsedPolicies.length > 0) {
        const p = lapsedPolicies[0];
        return res.json({ action: 'FOLLOW_UP_LAPSED', title: `Follow-up with ${p.customer}`, description: `It has been over a month since you last contacted them about their lapsed policy #${p.id}.`, policyId: p.id, customer: p });
    }
    return res.json({ action: 'ENGAGE', title: 'Engage Your Customers', description: 'No urgent actions found. This is a great time to send a promotional message to a customer segment.' });
};